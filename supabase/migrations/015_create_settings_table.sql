-- Create the settings table
CREATE TABLE IF NOT EXISTS public.settings (
  id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  site_title text NOT NULL DEFAULT 'News Portal',
  site_description text,
  maintenance_mode boolean NOT NULL DEFAULT false,
  enable_2fa_for_all boolean NOT NULL DEFAULT false,
  notification_email text,
  updated_at timestamptz DEFAULT now()
);

-- Ensure only one row can exist (singleton pattern)
CREATE UNIQUE INDEX settings_singleton_idx ON public.settings ((id = 1));

-- Insert default settings if the table is empty
INSERT INTO public.settings (id, site_title, site_description, maintenance_mode, enable_2fa_for_all, notification_email)
SELECT 1, 'News Portal', 'Your favorite source for news.', false, false, 'notifications@example.com'
WHERE NOT EXISTS (SELECT 1 FROM public.settings WHERE id = 1);

-- Enable RLS
ALTER TABLE public.settings ENABLE ROW LEVEL SECURITY;

-- Policies for settings
DROP POLICY IF EXISTS "Allow admin to read settings" ON public.settings;
CREATE POLICY "Allow admin to read settings"
  ON public.settings FOR SELECT
  USING (auth.uid() IN (SELECT id FROM public.admin_users WHERE role = 'admin'));

DROP POLICY IF EXISTS "Allow admin to update settings" ON public.settings;
CREATE POLICY "Allow admin to update settings"
  ON public.settings FOR UPDATE
  USING (auth.uid() IN (SELECT id FROM public.admin_users WHERE role = 'admin'));

-- Function to update settings
CREATE OR REPLACE FUNCTION update_settings_rpc(payload jsonb)
RETURNS void
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  caller_role text;
BEGIN
  -- Check if the caller is an admin
  SELECT role INTO caller_role FROM public.admin_users WHERE id = auth.uid();

  IF caller_role <> 'admin' THEN
    RAISE EXCEPTION 'Permission denied: You must be an admin to update settings.';
  END IF;

  -- Elevate role to bypass RLS for the update
  SET LOCAL ROLE service_role;

  UPDATE public.settings
  SET
    site_title = payload->>'site_title',
    site_description = payload->>'site_description',
    maintenance_mode = (payload->>'maintenance_mode')::boolean,
    enable_2fa_for_all = (payload->>'enable_2fa_for_all')::boolean,
    notification_email = payload->>'notification_email',
    updated_at = now()
  WHERE id = 1;

END;
$$;

GRANT EXECUTE ON FUNCTION update_settings_rpc(jsonb) TO authenticated;
