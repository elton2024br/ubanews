-- Create table for web vitals metrics
CREATE TABLE web_vitals (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name TEXT NOT NULL,
    value NUMERIC NOT NULL,
    rating TEXT NOT NULL,
    delta NUMERIC,
    url TEXT,
    navigation_type TEXT,
    user_agent TEXT,
    connection_type TEXT,
    is_mobile BOOLEAN,
    screen_width INTEGER,
    screen_height INTEGER,
    device_pixel_ratio NUMERIC,
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Table to store alerts when thresholds are exceeded
CREATE TABLE web_vital_alerts (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    vital_id UUID REFERENCES web_vitals(id) ON DELETE CASCADE,
    metric_name TEXT NOT NULL,
    metric_value NUMERIC NOT NULL,
    threshold NUMERIC NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Function to check thresholds and insert alerts
CREATE OR REPLACE FUNCTION check_web_vital_thresholds()
RETURNS TRIGGER AS $$
BEGIN
    IF (NEW.name = 'LCP' AND NEW.value > 2500) THEN
        INSERT INTO web_vital_alerts (vital_id, metric_name, metric_value, threshold)
        VALUES (NEW.id, NEW.name, NEW.value, 2500);
    ELSIF (NEW.name = 'INP' AND NEW.value > 200) THEN
        INSERT INTO web_vital_alerts (vital_id, metric_name, metric_value, threshold)
        VALUES (NEW.id, NEW.name, NEW.value, 200);
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger to run the threshold check after inserting metrics
CREATE TRIGGER trg_web_vital_threshold
AFTER INSERT ON web_vitals
FOR EACH ROW EXECUTE FUNCTION check_web_vital_thresholds();
